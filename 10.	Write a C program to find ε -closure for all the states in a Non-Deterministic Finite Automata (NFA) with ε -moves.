#include <stdio.h>
#include <stdbool.h>

#define MAX_STATES 10
#define MAX_TRANSITIONS 10

// Function to find ε-closure for a state in the NFA
void findEpsilonClosure(int nfa[MAX_STATES][MAX_TRANSITIONS], int numStates, int state, bool visited[MAX_STATES]);

int main() {
    int numStates, numTransitions;

    // Input the number of states and transitions
    printf("Enter the number of states: ");
    scanf("%d", &numStates);

    printf("Enter the number of transitions (including ε-transitions): ");
    scanf("%d", &numTransitions);

    int nfa[MAX_STATES][MAX_TRANSITIONS];
    bool visited[MAX_STATES];

    // Input the NFA transitions
    printf("Enter the NFA transitions (use -1 to denote no transition):\n");
    for (int i = 0; i < numStates; i++) {
        visited[i] = false;
        printf("Transitions from state %d (use -1 to end): ", i);
        for (int j = 0; j < numTransitions; j++) {
            scanf("%d", &nfa[i][j]);
            if (nfa[i][j] == -1) {
                break;
            }
        }
    }

    // Find ε-closure for each state and print the result
    printf("\nε-Closure for each state:\n");
    for (int i = 0; i < numStates; i++) {
        printf("ε-Closure(%d): { ", i);
        for (int j = 0; j < numStates; j++) {
            visited[j] = false;
        }
        findEpsilonClosure(nfa, numStates, i, visited);
        for (int j = 0; j < numStates; j++) {
            if (visited[j]) {
                printf("%d ", j);
            }
        }
        printf("}\n");
    }

    return 0;
}

void findEpsilonClosure(int nfa[MAX_STATES][MAX_TRANSITIONS], int numStates, int state, bool visited[MAX_STATES]) {
    visited[state] = true;

    // Traverse all transitions from the current state
    for (int i = 0; nfa[state][i] != -1; i++) {
        int nextState = nfa[state][i];
        if (!visited[nextState]) {
            findEpsilonClosure(nfa, numStates, nextState, visited);
        }
    }
}
